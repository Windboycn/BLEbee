# BLEBee v1.0.0 firmware
# using BLE112 SDK v1.1.1 build71
# (c) by Dr. Michael Kroll 2013
#
# http://www.mkroll.mobi
# http://forum.mkroll.mobi

# used for the BD Addr characteristic
dim bdaddr(6)
dim shieldaddr(6)

# used for the Device name characteristic
dim devicename(15)

# endpoint data in used for the watermarks
dim in(20) 
dim in_len
dim result

#variable that holds the status of the connection led
dim len_conn_led_enabled
dim conn_led_enabled(1)

#variable that holds the baudrate setting
dim len_baudrate
dim baudrate(1)

# used for the Channel characteristics
dim val
dim emptyBuf(1)

# set to 1 if device is connected
dim connected

event system_boot(major, minor, patch, build, ll_version, protocol, hw)	
	
	# Load the status of the connection led flag from storage
	call flash_ps_load($8000)(result, len_conn_led_enabled, conn_led_enabled(0:1))
	call attributes_write(xgatt_con_led, 0, 1, conn_led_enabled(0:1))
		
	# Load the status from the baudrate flag from storage
	call flash_ps_load($8001)(result, len_baudrate, baudrate(0:1))
	call attributes_write(xgatt_baudrate, 0, 1, baudrate(0:1))		
		
	# set port 1 to output
	call hardware_io_port_config_direction(1, $f)
	
    # set port 1 pins P1_0 to P1_3 to "0" 
	call hardware_io_port_write(1, $1, $0)
	call hardware_io_port_write(1, $2, $0)
	call hardware_io_port_write(1, $4, $0)
	call hardware_io_port_write(1, $8, $0)
	
	# diable the watermarks
	call system_endpoint_set_watermarks(system_endpoint_uart1, 0, 0) # disable watermarks
	
	#read the local devices public Bluetooth address
	call system_address_get()(bdaddr(0:6))
	
	#create the device name buffer (ascii)
	devicename(0:1)   = 66  # B 
	devicename(1:1)   = 76  # L
	devicename(2:1)   = 69  # E
	devicename(3:1)   = 66  # B
	devicename(4:1)   = 101 # e
	devicename(5:1)   = 101 # e	
	devicename(6:1)   = 32  # 
	devicename(7:1)   = (bdaddr(3:1)/$10) + 48 + ((bdaddr(3:1)/$10)/10*7) 
	devicename(8:1)   = (bdaddr(3:1)&$f)  + 48 + ((bdaddr(3:1)&$f )/10*7) 
	devicename(9:1)   = (bdaddr(2:1)/$10) + 48 + ((bdaddr(2:1)/$10)/10*7) 
	devicename(10:1)  = (bdaddr(2:1)&$f)  + 48 + ((bdaddr(2:1)&$f )/10*7) 
	devicename(11:1)  = (bdaddr(1:1)/$10) + 48 + ((bdaddr(1:1)/$10)/10*7) 
	devicename(12:1)  = (bdaddr(1:1)&$f)  + 48 + ((bdaddr(1:1)&$f )/10*7) 
	devicename(13:1)  = (bdaddr(0:1)/$10) + 48 + ((bdaddr(0:1)/$10)/10*7) 
	devicename(14:1)  = (bdaddr(0:1)&$f)  + 48 + ((bdaddr(0:1)&$f )/10*7)
		
	#write the device name characteristic	
	call attributes_write(xgatt_device_name, 0, 20, devicename(0:20))
	
	#create the addr buffer (hex)
	shieldaddr(0:1)  = bdaddr(5:1)
	shieldaddr(1:1)  = bdaddr(4:1)
	shieldaddr(2:1)  = bdaddr(3:1)
	shieldaddr(3:1)  = bdaddr(2:1)
	shieldaddr(4:1)  = bdaddr(1:1)
	shieldaddr(5:1)  = bdaddr(0:1)
	
	#write the bd address characteristic
	call attributes_write(xgatt_bdaddr, 0, 6, shieldaddr(0:6))
	
	# set port 1 to output
	call hardware_io_port_config_direction(0, $f)
	# set port 0 pin P0_0 to "0" which is used for the blue Connection LED
	call hardware_io_port_write(0, $1, $0)
	
	# set port 0 pin P0_1 to "0" which is used for the interrupt pin
	call hardware_io_port_write(0, $2, $0)
	
	#set to advertising mode
	call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
		
	#set bondable mode
	call sm_set_bondable_mode(1)	
	
	# Check the baudrate store setting and set the baudrate accordingly
	# 9600 baud
	if baudrate(0:1)=$00	
        call system_reg_write($70fa, 59)    # mantissa, BAUD_M
        call system_reg_write($70fc, 8)     # exponent, BAUD_E 
	end if

	# 14400 baud
	if baudrate(0:1)=$01
        call system_reg_write($70fa, 216)   # mantissa, BAUD_M
        call system_reg_write($70fc, 8)     # exponent, BAUD_E 
	end if
	
	# 19200 baud
	if baudrate(0:1)=$02
        call system_reg_write($70fa, 59)    # mantissa, BAUD_M
        call system_reg_write($70fc, 9)     # exponent, BAUD_E 
	end if
	
	# 28800 baud
	if baudrate(0:1)=$03
        call system_reg_write($70fa, 216)   # mantissa, BAUD_M
        call system_reg_write($70fc, 9)     # exponent, BAUD_E 
	end if	
	
	# 38400 baud
	if baudrate(0:1)=$04
        call system_reg_write($70fa, 59)    # mantissa, BAUD_M
        call system_reg_write($70fc, 10)    # exponent, BAUD_E 
	end if	
	
	#set the flag to 0, since there is no connection after boot
	connected = 0
end

event connection_disconnected(connection ,reason)	

    #set the flag to 0, since the connection was terminated.
	connected = 0

	# load the state of the enable connection led flag from store
	call flash_ps_load($8000)(result, len_conn_led_enabled, conn_led_enabled(0:1))

    #connection disconnected, continue advertising
    call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
	
	# set port 0 pin P0_0 to "0" = Turn off the blue LED
	call hardware_io_port_write(0, $1, $0)

	# set port 0 pin P0_1 to "0" = Change the interrupt pin.
	call hardware_io_port_write(0, $2, $0)
	
	# disable watermarks
	call system_endpoint_set_watermarks(system_endpoint_uart1, 0, 0) 	
	
	#clear the data in the GATT 
	emptyBuf(0:1) = $0
	call attributes_write(xgatt_rx, 0, 0, emptyBuf(0:0))
end

event attributes_value(connection, reason, handle, offset, value_len, value_data)
  
  # Characteristic Enabled Connection Led has been written
  if handle=xgatt_con_led
    if value_data(0:1)=$00
	  call flash_ps_save($8000, value_len, value_data(0:1))
	end if
	
	if value_data(0:1)=$ff
	  call flash_ps_save($8000, value_len, value_data(0:1))
	end if
  end if
  
  # Characteristic Baudrate has been written
  if handle=xgatt_baudrate
	# 9600 baud
	if value_data(0:1)=$00
		call flash_ps_save($8001, value_len, value_data(0:1))		
		call system_reg_write($70fa, 59)    # mantissa, BAUD_M
        call system_reg_write($70fc, 8)     # exponent, BAUD_E 
	end if
	
	# 14400 baud
	if value_data(0:1)=$01
	  call flash_ps_save($8001, value_len, value_data(0:1)) 
	  call system_reg_write($70fa, 216)   # mantissa, BAUD_M
      call system_reg_write($70fc, 8)     # exponent, BAUD_E 
	end if
	
	# 19200 baud
	if value_data(0:1)=$02
	  call flash_ps_save($8001, 1, value_data(0:1))	  
      call system_reg_write($70fa, 59)    # mantissa, BAUD_M
      call system_reg_write($70fc, 9)     # exponent, BAUD_E 
	end if	

	# 28800 baud
	if value_data(0:1)=$03
	  call flash_ps_save($8001, 1, value_data(0:1))
  	  call system_reg_write($70fa, 216)   # mantissa, BAUD_M
      call system_reg_write($70fc, 9)     # exponent, BAUD_E 
	end if	

	# 38400 baud
	if value_data(0:1)=$04
		call flash_ps_save($8001, 1, value_data(0:1))
		call system_reg_write($70fa, 59)    # mantissa, BAUD_M
        call system_reg_write($70fc, 10)    # exponent, BAUD_E 	
	end if	
	
	# Load the status from the baudrate flag from storage
	call flash_ps_load($8001)(result, len_baudrate, baudrate(0:1))
	call attributes_write(xgatt_baudrate, 0, 1, baudrate(0:1))			
  end if
  
  # Characteristic TX has been written
  if handle=xgatt_tx then 
    call system_endpoint_tx(system_endpoint_uart1, value_len, value_data(0:value_len))
  end if
  
  # Characteristic D0 Output has been written
  if handle=xgatt_d0 then 
	val = value_data(0:1) 
	  
    if val=$00 then
	  call hardware_io_port_write(1,$1,$0)
	end if

	if val=$ff then
	  call hardware_io_port_write(1,$1,$1)
	end if
  end if

  # Characteristic D1 Output has been written
  if handle=xgatt_d1 then 
  	val = value_data(0:1) 
  
	if val=$00 then
	  call hardware_io_port_write(1,$2,$0)
	end if

	if val=$ff then
	  call hardware_io_port_write(1,$2,$2)
	end if
  end if  
  
  # Characteristic D2 Output has been written
  if handle=xgatt_d2 then 	
    val = value_data(0:1)	
	  
	if val=$00 then
	  call hardware_io_port_write(1,$4,$0)
	end if

	if val=$ff then
	  call hardware_io_port_write(1,$4,$4)
	end if
  end if
  
  # Characteristic D3 Output has been written
  if handle=xgatt_d3 then 
	val = value_data(0:1)	
	  
	if val=$00 then
	  call hardware_io_port_write(1,$8,$0)
	end if

	if val=$ff then
	  call hardware_io_port_write(1,$8,$8)
	end if
  end if
end

event system_endpoint_watermark_rx(endpoint, size)
    if endpoint = system_endpoint_uart1 then
      in_len = size
      if in_len > 20 then
        in_len = 20
      end if
	      
      # disable RX watermark (recommended in 'cable replacement' application note from bluegiga	
	  call system_endpoint_set_watermarks(system_endpoint_uart1, 0, $ff) 
	  #read from UART
      call system_endpoint_rx(system_endpoint_uart1, in_len)(result, in_len, in(0:in_len)) 
	  #send over BLE
	  call attributes_write(xgatt_rx, 0, in_len, in(0:in_len)) 
	  # set RX watermark (1 byte treshhold)
	  call system_endpoint_set_watermarks(system_endpoint_uart1, 1, $ff) 
	
	end if
end

event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
	if connected = 0 then
		# set port 0 pin P0_0 to "1" 
		# turn the ble LED on
		if conn_led_enabled(0:1)=$ff
		  call hardware_io_port_write(0,$1,$1)
		end if
	
		# set port 0 pin P0_1 to "1"
		# set the pin ASSOC high to indicate a connection.	
		call hardware_io_port_write(0,$2,$2)
	
		#clear the UART buffer
		#reading from it 10 times seem to do the trick
		in_len = 1
		call system_endpoint_rx(system_endpoint_uart1, in_len)(result, in_len, in(0:in_len)) #read from UART
		call system_endpoint_rx(system_endpoint_uart1, in_len)(result, in_len, in(0:in_len)) #read from UART
		call system_endpoint_rx(system_endpoint_uart1, in_len)(result, in_len, in(0:in_len)) #read from UART
		call system_endpoint_rx(system_endpoint_uart1, in_len)(result, in_len, in(0:in_len)) #read from UART
		call system_endpoint_rx(system_endpoint_uart1, in_len)(result, in_len, in(0:in_len)) #read from UART
		call system_endpoint_rx(system_endpoint_uart1, in_len)(result, in_len, in(0:in_len)) #read from UART
		call system_endpoint_rx(system_endpoint_uart1, in_len)(result, in_len, in(0:in_len)) #read from UART
		call system_endpoint_rx(system_endpoint_uart1, in_len)(result, in_len, in(0:in_len)) #read from UART
		call system_endpoint_rx(system_endpoint_uart1, in_len)(result, in_len, in(0:in_len)) #read from UART
		call system_endpoint_rx(system_endpoint_uart1, in_len)(result, in_len, in(0:in_len)) #read from UART
		
		#clear the data in the GATT 
		emptyBuf(0:1) = $0
		call attributes_write(xgatt_rx, 0, 0, emptyBuf(0:0))
		
		#enable the watermarks for RX here
		call system_endpoint_set_watermarks(system_endpoint_uart1, 1, $ff) 
	end if
	
	connected = 1		
end